-- Flyway migration: Add tenant isolation support\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
-- Users table adjustments\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE users ADD COLUMN IF NOT EXISTS tenant_id VARCHAR(64);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
UPDATE users SET tenant_id = COALESCE(tenant_id, 'default') WHERE tenant_id IS NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE users ALTER COLUMN tenant_id SET NOT NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DO $$\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DECLARE rec RECORD;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
BEGIN\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    FOR rec IN (\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        SELECT constraint_name\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        FROM information_schema.table_constraints\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        WHERE table_name = 'users' AND constraint_type = 'UNIQUE'\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    ) LOOP\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        EXECUTE format('ALTER TABLE users DROP CONSTRAINT %I', rec.constraint_name);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    END LOOP;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
END $$;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DROP INDEX IF EXISTS idx_user_username;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DROP INDEX IF EXISTS idx_user_phone_number;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
CREATE INDEX IF NOT EXISTS idx_user_tenant ON users (tenant_id);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE users ADD CONSTRAINT uk_user_username_tenant UNIQUE (tenant_id, username);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE users ADD CONSTRAINT uk_user_phone_tenant UNIQUE (tenant_id, phone_number);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
-- Transaction table adjustments\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE "transaction" ADD COLUMN IF NOT EXISTS tenant_id VARCHAR(64);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
UPDATE "transaction" SET tenant_id = COALESCE(tenant_id, 'default') WHERE tenant_id IS NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE "transaction" ALTER COLUMN tenant_id SET NOT NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DO $$\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DECLARE rec RECORD;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
BEGIN\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    FOR rec IN (\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        SELECT constraint_name\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        FROM information_schema.table_constraints\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        WHERE table_name = 'transaction' AND constraint_type = 'UNIQUE'\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    ) LOOP\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        EXECUTE format('ALTER TABLE "transaction" DROP CONSTRAINT %I', rec.constraint_name);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    END LOOP;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
END $$;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
CREATE INDEX IF NOT EXISTS idx_transaction_tenant_time ON "transaction" (tenant_id, transaction_time);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
CREATE INDEX IF NOT EXISTS idx_transaction_user_time ON "transaction" (user_id, transaction_time);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE "transaction" ADD CONSTRAINT uk_tx_external_event UNIQUE (tenant_id, external_event_id);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE "transaction" ADD CONSTRAINT uk_tx_payment_key UNIQUE (tenant_id, payment_key);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE "transaction" ADD CONSTRAINT uk_tx_order_id UNIQUE (tenant_id, order_id);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
-- Rule table adjustments\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE rule ADD COLUMN IF NOT EXISTS tenant_id VARCHAR(64);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
UPDATE rule SET tenant_id = COALESCE(tenant_id, 'default') WHERE tenant_id IS NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE rule ALTER COLUMN tenant_id SET NOT NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DO $$\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DECLARE rec RECORD;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
BEGIN\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    FOR rec IN (\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        SELECT constraint_name\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        FROM information_schema.table_constraints\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        WHERE table_name = 'rule' AND constraint_type = 'UNIQUE'\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    ) LOOP\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        EXECUTE format('ALTER TABLE rule DROP CONSTRAINT %I', rec.constraint_name);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    END LOOP;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
END $$;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
CREATE INDEX IF NOT EXISTS idx_rule_tenant ON rule (tenant_id);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE rule ADD CONSTRAINT uk_rule_tenant_name UNIQUE (tenant_id, rule_name);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
-- Detection result table adjustments\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE detection_result ADD COLUMN IF NOT EXISTS tenant_id VARCHAR(64);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
UPDATE detection_result SET tenant_id = COALESCE(tenant_id, 'default') WHERE tenant_id IS NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE detection_result ALTER COLUMN tenant_id SET NOT NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
CREATE INDEX IF NOT EXISTS idx_detection_tenant ON detection_result (tenant_id);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
-- Notification table adjustments\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE notification ADD COLUMN IF NOT EXISTS tenant_id VARCHAR(64);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
UPDATE notification SET tenant_id = COALESCE(tenant_id, 'default') WHERE tenant_id IS NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE notification ALTER COLUMN tenant_id SET NOT NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
CREATE INDEX IF NOT EXISTS idx_notification_tenant ON notification (tenant_id);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
-- Batch transaction event table adjustments\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE batch_transaction_event ADD COLUMN IF NOT EXISTS tenant_id VARCHAR(64);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
UPDATE batch_transaction_event SET tenant_id = COALESCE(tenant_id, 'default') WHERE tenant_id IS NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE batch_transaction_event ALTER COLUMN tenant_id SET NOT NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
CREATE INDEX IF NOT EXISTS idx_batch_event_tenant_processed ON batch_transaction_event (tenant_id, processed);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
CREATE INDEX IF NOT EXISTS idx_batch_event_tenant_time ON batch_transaction_event (tenant_id, transaction_time);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
-- Daily transaction report table adjustments\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE daily_transaction_report ADD COLUMN IF NOT EXISTS tenant_id VARCHAR(64);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
UPDATE daily_transaction_report SET tenant_id = COALESCE(tenant_id, 'default') WHERE tenant_id IS NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE daily_transaction_report ALTER COLUMN tenant_id SET NOT NULL;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DO $$\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
DECLARE rec RECORD;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
BEGIN\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    FOR rec IN (\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        SELECT constraint_name\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        FROM information_schema.table_constraints\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        WHERE table_name = 'daily_transaction_report' AND constraint_type = 'UNIQUE'\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    ) LOOP\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
        EXECUTE format('ALTER TABLE daily_transaction_report DROP CONSTRAINT %I', rec.constraint_name);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
    END LOOP;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
END $$;\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
CREATE INDEX IF NOT EXISTS idx_daily_report_tenant ON daily_transaction_report (tenant_id);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
ALTER TABLE daily_transaction_report ADD CONSTRAINT uk_daily_report_tenant_date UNIQUE (tenant_id, report_date);\n-- DLQ retry table\nCREATE TABLE IF NOT EXISTS dlq_transaction_retry (\n    id BIGSERIAL PRIMARY KEY,\n    tenant_id VARCHAR(64) NOT NULL,\n    transaction_id BIGINT,\n    payload JSONB NOT NULL,\n    error_message TEXT,\n    error_type TEXT,\n    attempt_count INT NOT NULL DEFAULT 0,\n    next_retry_at TIMESTAMP NOT NULL,\n    last_failed_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_tenant ON dlq_transaction_retry (tenant_id);\nCREATE INDEX IF NOT EXISTS idx_dlq_retry_next_retry ON dlq_transaction_retry (next_retry_at);\n
